name: Vercel Continuous Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_TEAM_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  workflow_run:
    workflows: [CI - RecipeRevive] # Triggered by the test workflow
    types: [completed] # The test workflow must complete
    branches: [dev] # Only when main is updated
jobs:
  Deploy-Production:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }} # Only when test completed successfully 
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
 44 changes: 44 additions & 0 deletions44  
.github/workflows/terraform.yml
Viewed
@@ -0,0 +1,44 @@
name: Terraform Vercel Deployment

on:
  push:
    branches:
      - dev 
  pull_request:
    branches:
      - dev

jobs:
  terraform: 
    runs-on: ubuntu-latest
    env:
        VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init -input=false

    - name: Terraform Plan
      id: plan
      if: ${{ github.event_name == 'pull_request' }}
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: pass or fail
      uses: actions/github-script@v6
      if: ${{ steps.plan.outcome == 'failure' }}
      with:
        script: |
          core.setFailed('Plan failed!')
    - name: Terraform Apply
      id: apply
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: terraform apply -auto-approve -input=false